深浅拷贝：




字符编码：
    1、python文件的执行过程
        py文件如果没有python解释器，那他就是普通的文本文件

        1、先将python解释器由由硬盘读到内存
        2、将py文件由硬盘读到内存
        3、python解释器读取内存中py文件的数据
        3、识别python语法，执行相应的操作

    2、什么是字符
        字符就是（文字、英文）
        世界上一切文字都是字符

    3、基本单位换算
        8 bit = l bytes
        1024 bytes = 1KB
        1024 KB = 1MB
        1024 MB = 1GB
        1024 GB = 1TB
        1024 TB = 1PB

    4、字符编码的发展史
        字符编码表：
            ASCII码：
                八位二进制表示一位英文字符
                255
            gbk(中文)
                2 个 bytes表示一（中文、英文、符号、数字）
                兼容英文

            shift

            Euc_kr


            万国码（unicode）
                所有的字符都是以2 个 bytes来标识

                1、占用存储空间
                2、增加io操作，导致应用程序执行变慢（致命）

            utf-8
                一个 bytes表示英文字符
                三个 bytes表示中文字符

            现在的计算机：
                内存：unicode
                硬：utf-8

            乱码的主要原因：
                编码和解码不一致
            保证不乱码的核心：
                用什么编码存的，就用什么编码取

            要掌握的：
                数据由内存到硬盘

                    内存中的unicode二进制 >>>  编码（encode）  >>> 硬盘中的utf-8
                    硬盘中的utf-8 >>>   解码（decode）    >>> 内存中的unicode

                数据的传输：
                    优先以自己本国相对应的字符编码来传输

    5、文件头：
        # coding:utf-8

        告诉你的python解释器，你要用什么编码读取python文件

        python2：ASCII码
        python3：UTF-8

        pycharm：utf-8
        windows：gbk
        linux：utf-8


    6、Python2和python3字符串的区别：

        python2字符串的本质：8个bit的序列
        python3字符串的本质：unicode的序列

文件处理：
    1、什么是文件
        操作系统提供给你一个操作硬盘的接口

    2、为什么用文件
        计算机需要永久保存数据

    3、怎么用文件
        open()

        f = open('文件路径','打开文件的模式','指定的字符编码')

        f:文件句柄
        f.close()  # 回收操作系统的资源

        文件路径：
            相对路径：在当前文件同目录及以下都可以
            绝对路径：D:\项目路径\python13期\day08\a.txt

        文件上下文处理：
            with open('文件路径','打开文件的模式','指定的字符编码') as f:
                pass

        文件打开模式：
            r:只读：
                1、只能读，不能写
                2、如果文件不存在的话，就会报错
            w:只写：
                1、只能写，不能读
                2、如果文件不存在的话，会创建新文件
                3、如果文件存在的话，先清空源文件，再写入新文件
            a:追加写：
                1、只能写，不能读
                2、如果文件不存在的话，会创建新文件
                3、如果文件存在的话，会在原数据的末尾追加新数据

        文件处理模式：

            t:文本模式
                只能与r\w\a连用
                默认情况下，是rt模式

            b:bytes模式
                只能与r\w\a连用
                处理二进制数据
        文件处理的内置方法：
            读
                f.read()  # 读文件；一次性读出所有数据
                f.readline() # 一次读一行
                f.readlines()  # 将数据全部读入内存，以换行符分隔，存入列表
                f.readable()  # 是否可读
            写：
                f.write # 写文件
                f.writeable # 是否可写
                f.writelines()  # for + f.write()

            for line in f:
                pass
        r:防止转义