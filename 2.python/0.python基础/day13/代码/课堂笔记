昨日回顾:
    1.叠加装饰器
        同一个被装饰对象可以叠加装饰多个装饰器
        装饰顺序:
            由下往上装饰

        执行顺序:
            由上往下执行

    2.有参装饰器
        本质上就是在无参装饰器上套了一个外层函数，
        无参装饰器可以引用外层函数的名字。

        应用:
            用户权限的认证

        - 无参装饰器与有参装饰器的使用
            - @无参装饰器
            - @有参装饰器('参数1', '参数2')  ---》 调用有参装饰器会得到一个无参装饰器

    3.迭代器
        迭代: 重复迭代的过程，每一次都是基于上一次的结果而来的。

        迭代器:
            迭代取值的工具。

        可迭代对象:
            凡是内部有__iter__()方法对象。
            list, str, tuple, dict, set, f

        获取迭代器:
            list1 = [1, 2, 3]
            # 调用__iter__()会得到一个返回值，该返回值是一个迭代器对象。
            iter_list = list1.__iter__()

        - 如何通过迭代器取值
            每一次调用__next__()都会从迭代器中取出一个值
            iter_list.__next__()
            注意: 取到最后一个时，若值没有，则会报错。

            while True:
                try:
                    print(iter_list.__next__())

                except StopIteration:
                    break

        - for循环原理
            # in: 会将可迭代对象自动调用__iter__()变成迭代器对象。
            for i in 可迭代对象:
                # 会自定帮你调用__next__
                print(i)
            # for循环内部也会有一个捕获异常机制，一旦遇到异常也会停止取值。

        - 迭代器的优缺点:
            优点:
                1.提供了一种不依赖于索引的取值方式
                2.节省内存

            缺点:
                1.指定取某个值麻烦，每一次取值都要从第一个开始查找
                补充: 2.不能通过len计算长度










今日内容:
    1.生成器理论
    2.面向过程编程  理论
    3.三元表达式
    4.列表生成式
    5.生成器表达式
    6.匿名函数
    7.内置函数
