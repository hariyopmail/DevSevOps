昨日回顾:
    1.函数对象
        - 是什么？
            函数的名字就是函数对象，函数名指向的是函数的内存地址。

        - 有什么用？
            - 可以被引用
            - 可以被当做参数传入
            - 可以被当做函数的返回值
            - 可以当做参数传入容器中
                {"key": func--X0...}

        - 函数对象的应用:
            补充--》可以优雅地取代if分支

    2.函数嵌套
        - 函数嵌套定义: 让内层函数封闭起来，不让外部直接调用。
            def func1():

                def func2():
                    pass

                return func2

            func2()


        - 函数嵌套调用: 将复杂并且小的功能，在函数内部调用，解决代码结构清晰问题。
            def login():
                pass

            def register():
                pass

            # 使用func函数的前提是，必须先注册，登录，再使用
            def func():
                register()
                login()
                func的逻辑代码
                ...

    3.名称空间与作用域
        - 名称空间什么是？
            用来存放名字的，名称空间是一个在内存中的空间。
            x = 100
            def func():
                pass
            - 内置名称空间:
                在python解释器启动时产生，关闭时销毁。

            - 全局名称空间:
                执行当前的py文件时产生，文件执行结束后销毁，关闭解释器时彻底销毁。

            - 局部名称空间:
                在执行函数时产生，临时存活，函数调用结束时销毁。

            - 名称空间 加载顺序与查找顺序:
                - 加载顺序：内置 ---> 全局 ---> 局部
                - 查找顺序: 局部 ---> 全局 ---> 内置

        - 作用域: 名称空间作用的范围
            - 全局:
                内置名称空间 + 全局名称空间
                - 只要程序一直执行，永久存活，若程序结束，则销毁

            - 局部:
                局部的名称空间 + 局部的局部的名称空间
                - 只要程序一直执行，调用函数时存活，结束时销毁

今日内容:
    1.闭包函数
        - 什么是闭包函数?
            闭: 封闭
            包: 包裹

            比如手机是闭包函数（内层函数），被手机包装盒 (外层函数) 包裹起来，
            手机可以使用包装盒中的东西，内层函数可以引用外层函数的名字。

            1.闭包函数必须在函数内部定义
            2.闭包函数可以引用外层函数的名字

            闭包函数是 函数嵌套、函数对象、名称空间与作用域 结合体。

            ***** 闭包函数是为了装饰器作准备

            def func(y):
                x = 100
                # inner是闭包函数
                def inner():
                    print(x)
                    print(y)
                return inner

            inner = func()
            inner()


    2.装饰器
        - 什么是装饰器？
            装饰: 装饰，修饰。
            器: 工具。
            装饰的工具。
            *****“开放封闭”： 装饰器必须要遵循 “开放封闭” 原则。
            - 开放:
                对函数功能的添加是开放的。

            - 封闭:
                对函数功能修改是封闭的。

        - 装饰器的作用？
            - 在不修改被装饰对象源代码与调用方式的前提下, 添加新的功能。

                # 装饰器的定义必须遵循
                - 不修改被装饰对象源代码
                - 不修改被装饰对象调用方式

        - 为什么要使用装饰器？
            可以解决代码冗余问题，提高代码的可扩展性。

        - 怎么使用装饰器？
            - 装饰器的应用:
                - 统计时间
                - 登录认证

            - 编写装饰器:
                通过闭包函数来实现装饰器。
