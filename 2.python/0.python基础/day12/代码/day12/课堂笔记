昨日回顾:
    - 闭包函数:
        - 闭包函数是 函数对象、函数嵌套、名称空间与作用域的结合体。
        - 1.必须要在函数内定义
        - 2.可以引用外层函数的名字
        def outer(x):
            def inner():
                print(x)
                pass
            return inner
        x = 10
        inner = outer(x)
        inner()

        - 闭包函数的作用:
            1.为了装饰器作准备的。
            2.减少代码冗余

    - 装饰器:
        1.什么是装饰器？
            在不修改被装饰对象的源代码与调用方式的前提下，为其添加新的功能。

        2.定义装饰器:
            - 不修改被装饰对象的源代码
            - 不修改被装饰对象的调用方式

            - 被装饰对象 ---》 需要添加新功能的  函数
            - 装饰器 ---> 为需要添加新功能的函数添加功能  函数
            def wrapper(func):  # func函数对象 ---> 被装饰对象
                # *args, **kwargs用于接收被装饰对象的参数
                def inner(*args, **kwargs):
                    # 在调用被装饰对象前 添加新功能
                    res = func(*args, **kwargs)

                    # 在调用被装饰对象后 添加新功能
                    return res
                return inner
        3.统计时间认证
            import time

            def download_movie():
                print('开始下载')
                time.sleep(5)
                print('下载结束')
                return 'cang老师.mp4'


            def time_record(func):
                def inner(*args, **kwargs):
                    start_time = time.time()  # 获取当前时间戳
                    res = func(*args, **kwargs)  # func --> download_movie
                    end_time = time.time()
                    print(end_time - start_time)
                    return res
                return inner

            download_movie = time_record(download_movie)
            download_movie()

        4.装饰器的语法糖
            语法糖是python内置的，可以引用所有的装饰器

            @: 就是语法糖

            - 如何使用:
                @装饰器
                def 被装饰对象():
                    pass

            注意: 使用语法糖必须遵循,装饰器的定义必须要在被装饰对象之上。



今日内容:
    - 装饰器剩余部分
        装饰的工具。
        - 叠加装饰器
            - 每一个新的功能都应该写一个新的装饰器
            - 否则会导致，代码冗余，结构不清晰，可扩展性差

        - 有参数装饰器
        - 补充: wraps

    - 迭代器
        迭代的工具。

        迭代:
            迭代指的是重复迭代，每一次迭代都是基于上一次的结果而来的。

        迭代器:
            迭代器指的是迭代取值的工具，它可以迭代取值。

        - 如果想要知道python中迭代器是什么？必须先知道什么是可迭代对象？

        可迭代对象:  所有的序列类型: str, list, tuple, dict, set, f
            凡是内部有str.__iter__()方法的都是可迭代对象。

        - 获取迭代器:
            通过可迭代对象.__iter__(), 得到的返回值就是 “迭代器对象”。
            迭代器是迭代取值的工具，作用是迭代取值。

            - 如何迭代取值:
                迭代器对象.__next__()  # “每一次执行”，都会从迭代器对象中取出一个值

