昨日回顾:
    1.生成器
        生成的工具
        生成器是一个自定义的迭代器。

        - yield:
            - yield必须在函数内部定义
            - yield可以保存函数的暂停状态
            yield的效果与return雷同

        生成器 ---》 生成器对象
        迭代器 ---》 迭代器对象

        - 凡是函数内部有yield，在调用函数时不会执行函数体代码，会返回一个生成器对象，本质上是一个迭代器。

        - return与yield的区别:
            相同点:
                都可以返回无限制的值。

            不同点:
                yield可以返回多次值，return只能返回一次

        迭代器对象.__next__()  ==   next(迭代器对象)

    2.面向过程编程
        核心是 “过程” 二字， 过程指的是解决问题的步骤，即先干什么再干什么。
        基于该编程思想编写程序，就好在设计一条流水线，一种机械式的思维方式。

        # 设计编写程序的步骤:
        注册功能: ----> 用户合法性的校验 ----> 拼接用户数据格式---->
        保存到文件中。

        优点:
            复杂的流程化，进而简单化

        缺点:
            牵一发而动全身，扩展性差


    3.三元表达式
      成立返回的结果  if 判断条件 else 不成立返回的结果

    4.列表生成式
        - 生成一个列表
        # for循环了几次，列表中就有几个值
        l = [line for line in 可迭代对象]
        [任意的值 for line in 可迭代对象]
        print(l)  # list


    5.生成器生成式
        - 生成一个生成器对象 ---》 生成一个迭代器对象
        tuple = ()
        (line for line in 可迭代对象)
        g = (任意值 for line in 可迭代对象)
        print(g)  # 生成器对象


    列表生成式与生成器生成式的区别
        - 列表生成式
            优点:
                可以依赖于索引取值，取值方便

            缺点:
                在数据量过大时浪费资源

        - 生成器生成式
            优点:
                在数据量过大时节省资源

            缺点:
                不依赖于索引取值，取值麻烦。

    6.匿名函数
        没有名字的函数:
            lambda x: x + x  # ---> 内存地址
                # def (x):
                #    return x + x
            名字 = lambda x: x + x
            名字()  # 匿名---》 有名  ---》 还不如直接通过def 来定义。

        有名字的函数:
            def 名字(x):  # 名字 ---> 内存地址
                pass

        函数名字 + ()调用，执行函数体代码

        匿名函数没有名字，不能单独使用。

        匿名的应用:
            配合内置函数一起使用。

    7.内置函数
        max: 获取可迭代对象中最大值
        min: 获取可迭代对象中最小值
        sorted: 对可迭代对象中的数据进行排序
            默认是: 升序
            reverse=True: 降序




今日内容:
    1.内置函数剩余部分
        map
        reduce
        filter

    2.函数递归

    3.模块