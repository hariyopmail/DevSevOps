昨日回顾：
    1、其他的文件模式
        r+
        w+
        a+
    ps:都说可读可写，而且带着原来的特性

    2、文件内光标的移动
        f.read()
           读出文件内所有内容
           文件过大，会造成内存溢出
        f.read("int类型的参数")

        ps:rt,针对的就是字符
           rb,针对的就是字节
        f.seek(offset,whence)
        offset: 相对偏移度
        whence：
            0：以文件开头为参照物  # t，b都可以
            1：以光标当前位置为参照物  # b可以
            2：以文件末尾为参照  # b可以

        ps：1，2也可以使用t，光标不能移动

        utf-8:中文3个bytes
                英文1一个bytes
        gbk：中文是两个bytes，全角英文2bytes
            半角英文1bytes
    3、检测文件是否发生变化
        1、通过f.seek(0,2),将光标移动到文件末尾
        2、通过while循环，让文件保持打开状态
            1、通过f.readline(),获取当前光标所在行的内容
            2、通过if判断，是否获取到数据，获取到数据，说明，文件被改动
            3、print

    4、文件修改：
        1、将数据一次性全部读入内存，在内存修改该数据，
            写入原文件

            优点：
                从始至终只有一个文件
            缺点：
                如果文件过大，会造成内存溢出
        2、使用两个文件，将原文件的数据一行行读到内存，修改之后写入新文件，
            通过os模块，将原文件删除，将新文件名称改查原文件
            优点：
                从始至终，内存中只有一行数据
                对内存的压力小
            缺点：
                通过两个文件来实现的

    f.tell()  # 查询当前指针位置
    f.truncate(6)  # 截断
    f.flush()  # 将内存中数据刷到硬盘