昨日回顾:
    1.time模块
        - 获取时间戳：给机器看的
            time.time()
        - 格式化时间(Format String): 给人类看的
            年月日
            time.strftime('%Y-%m-%d')
            时分秒
            time.strftime('%H-%M-%S')
            time.strftime('%X')

        - 格式化时间对象(struct_time)
            time_obj = time.localtime(time.time())
            time_obj.tm_year
            ...


    2.datetime模块:
        # 获取日期时间
        datetime.datetime.today()
        datetime.datetime.now()
        datetime.date.today()

        # 获取日期"隔间"对象
        空的间隔_obj = datetime.datetime.timedelta()
        print(空的间隔_obj) ---> 0:0:0

        # 获取7天时间间隔
        day7_obj = datetime.datetime.timedelta(days=7)

        # 时间计算公式:
            - 日期时间 = 日期时间 + or - 时间对象
            - 时间对象 = 日期时间 + or - 日期时间

        # 获取当前时间7天后的时间
            day7_obj = datetime.datetime.timedelta(days=7)
            - 日期时间 = 日期时间 + or - 时间对象
            current_time = datetime.datetime.now()
            later_time = current_time + day7_obj
            print(later_time)  # 2019-11-25 09:18:XX

    3.random模块
        - 可以随机获取数据
        - 随机对数据进行操作
        - random.random()：
            - 随机获取0——1之间的某一个小数。

        - random.randint(1, 100)：
            - 随机获取1—100的某一个整数。

        - random.choice(可迭代对象):  注意: 有索引的可迭代对象
            - list, tuple
            - 随机获取可迭代对象中某一个值

        - random.shuffle():  注意: 不可变类型不可被乱序
            - list
            可以对某个有索引的可迭代对象进行乱序。

        - 随机获取手机短信验证码:
            import random
            def get_code(n):

                res = ''

                for line in range(n):

                    # 获取大小写字母
                    lower_str = chr(random.randint(97, 122))
                    upper_str = chr(random.randint(65, 90))

                    # 获取数字
                    number = str(random.randint(0, 9))

                    code_list = [lower_str, upper_str, number]

                    # 每次循环随机取一个值
                    code = random.choice(code_list)
                    res += code

                return res


    4.os模块
        - 与操作系统交互

        # 获取项目根目录，获取当前文件的目录
        project_path = os.path.dirname(os.path.dirname(__file__))

        # 路径的拼接
        os.path.join()

        # 判断文件或文件夹是否存在
        os.path.exists()  # 存在 True  不存在False

        # 判断文件夹是否存在
        os.path.isdir()

        # 判断文件是否存在
        os.path.isfile()

        # 获取某个文件夹下所有文件的名字，然后装进一个列表中
        file_list = os.listdir(文件夹的路径)

        # 创建文件夹与删除文件夹
        os.mkdir(文件夹路径)  # 只传文件夹名字，会保存在当前执行文件的目录下
        os.rmdir(文件夹路径)  # 注意: 只能删除空的文件夹

    5.enumerate: 获取可迭代对象中索引与值
        enumerate(可迭代对象)  # 注意: 可迭代對象中若是字典，则取字典中所有的key
        返回的enumerate对象 ---> 相当于迭代器对象
        list(迭代器对象) ---> 列表

    6.sys模块
        - 与python解释器交互的模块

        sys.path  # 获取python解释器的环境变量路径 ---》 list[一堆路径]

        # 将当前项目根目录添加到环境变量中
        sys.path.append(
            当前项目的根目录路径
        )

        # 获取到操作系统中cmd(终端)的命令行
        # 注意: 通过python执行py文件时，后面跟着的命令行
        sys.argv  ----》 执行py文件的权限认证

    6.hashlib模块
        - 加密模块
        - MD5()
            md5_obj = hashlib.md5()
            md5_obj.update('123456'.encode('utf-8'))  # 只能传bytes类型数据
            sal = 'python13期是最好的一期学生!'
            md5_obj.update(sal.encode('utf-8'))
            # 拿到加密后的结果
            res = md5_obj.hexdigest()  # 必须要加括号
            print(res)  # ---> 加密后的字符串

        hashlib.md5().update('123456'.encode('utf-8'))
        hashlib.md5().hexdigest()  # ---> 默认的加密字符串


今日内容:
    1.序列化模块
        序列化: 将Python或其他语言的数据类型转换成字符串类型。

        - int, float, str, list, tuple, dict, bool, set

        list1 = [1, 2, 3]  -----> "[1, 2, 3]"

        序列: 指的是字符串。

        序列化: serializable
            其他数据类型 ----> 字符串 ----> 文件中
        反序列化:
            文件中 ---> 字符串 ---> 其他数据类型

        - json
            第三方的

        - pickle
            属于python的

    2.collections模块
        - python默认八大数据:
            - 整型
            - 浮点型
            - 字符串
            - 字典
            - 元组
            - 列表
            - 集合
            - 布尔

        - 提供一些python八大数据类型“以外的数据类型”

    3.openpyxl模块
        - 可以对Excle表格进行操作的模块

    4.subprocess模块
        - 可以通过python代码执行操作系统终端命令，并且返回结果。


我将完：
周二: 总复习，下午开始写 ATM + 购物车
周三: ATM + 购物车 讲解
周四: 天上午练习， 下午考笔试，晚上练习
周五: 机试，面试
周六: 面向对象第一天